document.addEventListener('DOMContentLoaded', function() {
    // ========== CONFIGURAÇÃO MERCADO PAGO ==========
    const mp = new MercadoPago('SUA_CHAVE_PUBLICA', { // Substitua pela sua chave real
        locale: 'pt-BR'
    });
    let mercadoPagoCheckout; // Variável para controlar o fluxo de pagamento
    // ========== MENU MOBILE ==========
    const menuToggle = document.createElement('div');
    menuToggle.className = 'menu-toggle';
    menuToggle.innerHTML = '<i class="fas fa-bars"></i>';
    document.querySelector('.header .container').appendChild(menuToggle);

    const menu = document.querySelector('.menu');
    menuToggle.addEventListener('click', function() {
        menu.classList.toggle('active');
        menuToggle.classList.toggle('active');
    });

    // ========== CARRINHO COMPLETO ==========
    const addToCartButtons = document.querySelectorAll('.add-to-cart');
    const headerCartCount = document.querySelector('.header .cart-count');
    const floatingCartBtn = document.getElementById('floatingCartBtn');
    const floatingCartCount = document.getElementById('floatingCartCount');
    const headerCartBtn = document.querySelector('.header .cart-btn');

    let cartItems = JSON.parse(localStorage.getItem('kideliCart')) || [];
    let cartItemsCount = cartItems.reduce((sum, item) => sum + (item.quantity || 1), 0);
    let appliedCoupon = null;
    const deliveryFee = 15.00; // Valor fixo para exemplo

    // Cupons válidos (pode ser buscado do backend na implementação real)
    const validCoupons = {
        'KI10': { discount: 0.1, description: '10% de desconto' },
        'KI20': { discount: 0.2, description: '20% de desconto' },
        'FRETEKI': { discount: 0, description: 'Frete grátis', freeDelivery: true }
    };

    // Adicionar após a definição de validCoupons
    const paymentMethods = {
        pix: { name: "PIX", discount: 0.05, icon: "fa-qrcode" },
        creditCard: { name: "Cartão de Crédito", discount: 0, icon: "fa-credit-card" },
        debitCard: { name: "Cartão de Débito", discount: 0, icon: "fa-credit-card" }
    };

    // Adicionar ao updateCartSummary
    function updateCartSummary() {
        // ... código existente ...
        
        // Adicionar desconto do método de pagamento
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked').value;
        const paymentDiscount = paymentMethods[paymentMethod].discount * subtotal;
        const totalWithPaymentDiscount = subtotal - discount - paymentDiscount + delivery;
        
        // Atualizar exibição
        document.getElementById('paymentDiscount').textContent = formatPrice(paymentDiscount);
        document.getElementById('cartTotal').textContent = formatPrice(totalWithPaymentDiscount);
        
        // Atualizar parcelamento
        if(paymentMethod === 'creditCard') {
            updateInstallments(totalWithPaymentDiscount);
        }
    }

    function updateInstallments(total) {
        const installmentsSelect = document.getElementById('cardInstallments');
        installmentsSelect.innerHTML = '';
        
        const maxInstallments = 12;
        const minInstallmentValue = 50; // Valor mínimo por parcela
        
        const possibleInstallments = Math.min(
            maxInstallments,
            Math.floor(total / minInstallmentValue)
        );
        
        for(let i = 1; i <= possibleInstallments; i++) {
            const installmentValue = total / i;
            const option = document.createElement('option');
            option.value = i;
            option.textContent = `${i}x de ${formatPrice(installmentValue)}`;
            installmentsSelect.appendChild(option);
        }
    }

    // Adicionar listeners para métodos de pagamento
    document.querySelectorAll('input[name="paymentMethod"]').forEach(radio => {
        radio.addEventListener('change', function() {
            document.getElementById('cardForm').style.display = 
                (this.value === 'creditCard' || this.value === 'debitCard') ? 'block' : 'none';
            updateCartSummary();
        });
    });

    // Função para abrir o modal do carrinho
    function openCartModal() {
        const cartModal = document.getElementById('cartModal');
        cartModal.style.display = 'block';
        updateCartDisplay();
        setMinimumDeliveryDate();
    }

    // Função para fechar o modal do carrinho
    function closeCartModal() {
        document.getElementById('cartModal').style.display = 'none';
    }

    // Configura data mínima para entrega/retirada (2 dias após hoje)
    function setMinimumDeliveryDate() {
        const today = new Date();
        const minDate = new Date(today);
        minDate.setDate(today.getDate() + 2);
        
        const formattedDate = minDate.toISOString().split('T')[0];
        document.getElementById('deliveryDate').min = formattedDate;
        document.getElementById('pickupDate').min = formattedDate;
    }

    // Função para atualizar o carrinho (substitua a existente)
    function updateCartDisplay() {
        const cartItemsContainer = document.getElementById('cartItemsContainer');
        const emptyCartMessage = document.querySelector('.empty-cart-message');
        
        // Limpa apenas os itens, mantendo o template
        document.querySelectorAll('.cart-item:not([style*="display: none"])').forEach(item => item.remove());
        
        if (cartItems.length === 0) {
            emptyCartMessage.style.display = 'block';
        } else {
            emptyCartMessage.style.display = 'none';
            
            cartItems.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'cart-item';
                itemElement.setAttribute('data-id', item.id);
                itemElement.innerHTML = `
                    <img src="${item.image}" alt="${item.name}" class="cart-item-image">
                    <div class="cart-item-details">
                        <h3 class="cart-item-title">${item.name}</h3>
                        ${item.size ? `<p class="cart-item-size">Tamanho: ${item.size}</p>` : ''}
                        <p class="cart-item-quantity">Quantidade: ${item.quantity}</p>
                    </div>
                    <div class="cart-item-price">R$ ${(item.price * item.quantity).toFixed(2).replace('.', ',')}</div>
                    <button class="cart-item-remove" data-id="${item.id}">
                        <i class="fas fa-trash-alt"></i>
                    </button>
                `;
                cartItemsContainer.appendChild(itemElement);
            });
        }
        
        updateCartSummary();
        addCartItemEvents();
    }

    // Adicione esta nova função:
    function addCartItemEvents() {
        // Eventos para aumentar/diminuir quantidade
        document.querySelectorAll('.quantity-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-id');
                const item = cartItems.find(item => item.id === itemId);
                
                if (item) {
                    if (this.classList.contains('increase')) {
                        item.quantity += 1;
                    } else if (this.classList.contains('decrease') && item.quantity > 1) {
                        item.quantity -= 1;
                    }
                    
                    saveCart();
                    updateCartUI();
                }
            });
        });
        
        // Eventos para remover itens
        document.querySelectorAll('.cart-item-remove').forEach(btn => {
            btn.addEventListener('click', function() {
                const itemId = this.getAttribute('data-id');
                cartItems = cartItems.filter(item => item.id !== itemId);
                saveCart();
                updateCartUI();
            });
        });
    }
        

    // Atualiza o resumo do carrinho (valores totais)
    function updateCartSummary() {
        const subtotal = cartItems.reduce((sum, item) => sum + item.price, 0);
        const discount = appliedCoupon 
            ? appliedCoupon.discount * subtotal 
            : 0;
        const delivery = appliedCoupon?.freeDelivery 
            ? 0 
            : (document.getElementById('delivery').checked ? deliveryFee : 0);
        const total = subtotal - discount + delivery;
        
        document.getElementById('cartSubtotal').textContent = formatPrice(subtotal);
        document.getElementById('cartDiscount').textContent = formatPrice(discount);
        document.getElementById('deliveryFee').textContent = formatPrice(delivery);
        document.getElementById('cartTotal').textContent = formatPrice(total);
    }

    // Formata preço para exibição
    function formatPrice(price) {
        return 'R$ ' + price.toFixed(2).replace('.', ',');
    }

    // Adiciona item ao carrinho
    function addToCart(product) {
        // Verifica se o produto já está no carrinho (comparando id e tamanho)
        const existingItem = cartItems.find(item => 
            item.id === product.id && 
            (!product.size || item.size === product.size)
        );
        
        if (existingItem) {
            existingItem.quantity += product.quantity || 1;
        } else {
            cartItems.push({
                ...product,
                quantity: product.quantity || 1
            });
        }
        
        // Atualiza contagem e salva
        cartItemsCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);
        saveCart();
        updateCartUI();
        
        // Feedback visual
        return true;
    }
    
    // Adicione esta função para salvar o carrinho:
    function saveCart() {
        localStorage.setItem('kideliCart', JSON.stringify(cartItems));
    }

    // Remove item do carrinho
        
    function removeFromCart(itemId) {
        // 1. Encontra o índice do item
        const itemIndex = cartItems.findIndex(item => item.id === itemId);
        
        // 2. Se não encontrar, sai da função
        if (itemIndex === -1) {
            console.warn(`Item com ID ${itemId} não encontrado no carrinho`);
            return;
        }
    
        // 3. Animação de remoção
        const itemElement = document.querySelector(`.cart-item[data-id="${itemId}"]`);
        if (itemElement) {
            itemElement.classList.add('removing');
            
            // 4. Remove após a animação
            setTimeout(() => {
                cartItems.splice(itemIndex, 1);
                updateCartUI();
                
                // 5. Fecha o modal se o carrinho estiver vazio
                if (cartItems.length === 0) {
                    closeCartModal();
                }
            }, 300);
        } else {
            // 6. Fallback caso não encontre o elemento
            cartItems.splice(itemIndex, 1);
            updateCartUI();
        }
    }
    
    function loadCart() {
        const savedCart = localStorage.getItem('kideliCart');
        if (savedCart) {
            try {
                cartItems = JSON.parse(savedCart);
                cartItemsCount = cartItems.reduce((sum, item) => sum + (item.quantity || 1), 0);
                updateCartUI();
            } catch (e) {
                console.error("Erro ao carregar carrinho:", e);
                localStorage.removeItem('kideliCart');
                cartItems = [];
                cartItemsCount = 0;
            }
        }
    }
    
    // Chame loadCart() no início, após definir as variáveis do carrinho:
    loadCart();
    // Atualiza toda a interface do carrinho
    function updateCartUI() {
        updateCartDisplay();
        updateHeaderCartCount();
        saveCart();
        
        // Atualiza o contador flutuante
        const floatingCartBtn = document.getElementById('floatingCartBtn');
        if (cartItems.length > 0) {
            floatingCartBtn.classList.add('visible');
        } else {
            floatingCartBtn.classList.remove('visible');
        }
    }
    
    // Atualiza o contador do cabeçalho
    function updateHeaderCartCount() {
        cartItemsCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);
        document.querySelectorAll('.cart-count').forEach(el => {
            el.textContent = cartItemsCount;
        });
    }

    // Event Listeners
    addToCartButtons.forEach(button => {
        button.addEventListener('click', function() {
            const productCard = this.closest('.product-card');
            const product = {
                id: productCard.dataset.id || Date.now().toString(),
                name: productCard.querySelector('h3').textContent,
                description: productCard.querySelector('.product-description').textContent,
                price: parseFloat(productCard.querySelector('.price').textContent.replace('R$', '').replace(',', '.').trim()),
                image: productCard.querySelector('.product-img').src || './assets/image/default-product.jpg'
            };
            
            addToCart(product);
            
            // Efeito visual
            this.textContent = '✓ Adicionado';
            this.disabled = true;
            
            setTimeout(() => {
                this.textContent = 'Adicionar';
                this.disabled = false;
            }, 1500);
            
            // Efeito no card
            productCard.classList.add('added-to-cart');
            setTimeout(() => {
                productCard.classList.remove('added-to-cart');
            }, 1000);
        });
    });

    // Aplicar cupom
    document.getElementById('applyCoupon').addEventListener('click', function() {
        const couponCode = document.getElementById('coupon').value.trim();
        const couponMessage = document.getElementById('couponMessage');
        
        if (validCoupons[couponCode]) {
            appliedCoupon = validCoupons[couponCode];
            couponMessage.textContent = `Cupom aplicado: ${appliedCoupon.description}`;
            couponMessage.className = 'coupon-message valid';
        } else {
            appliedCoupon = null;
            couponMessage.textContent = 'Cupom inválido';
            couponMessage.className = 'coupon-message invalid';
        }
        
        updateCartSummary();
    });

    // Opções de entrega/retirada
    document.querySelectorAll('input[name="deliveryOption"]').forEach(radio => {
        radio.addEventListener('change', function() {
            document.getElementById('deliveryDetails').style.display = 
                this.value === 'delivery' ? 'block' : 'none';
            document.getElementById('pickupDetails').style.display = 
                this.value === 'pickup' ? 'block' : 'none';
            updateCartSummary();
        });
    });

    // Fechar modal
    document.querySelector('.cart-modal-close').addEventListener('click', closeCartModal);

    // Abrir carrinho
    floatingCartBtn.addEventListener('click', openCartModal);
    headerCartBtn.addEventListener('click', function(e) {
        e.preventDefault();
        openCartModal();
    });

    // ========== NEWSLETTER POPUP ==========
    const newsletterPopup = document.querySelector('.newsletter-popup');
    if (newsletterPopup) {
        const closeNewsletter = document.querySelector('.close-newsletter');
        
        // Mostra o popup após 5 segundos
        setTimeout(() => {
            if (!localStorage.getItem('newsletterClosed')) {
                newsletterPopup.style.display = 'flex';
            }
        }, 5000);

        if (closeNewsletter) {
            closeNewsletter.addEventListener('click', () => {
                newsletterPopup.style.display = 'none';
                localStorage.setItem('newsletterClosed', 'true');
            });
        }

        // Fecha ao clicar fora
        newsletterPopup.addEventListener('click', (e) => {
            if (e.target === newsletterPopup) {
                newsletterPopup.style.display = 'none';
                localStorage.setItem('newsletterClosed', 'true');
            }
        });
    }

    // ========== FORMULÁRIOS DE NEWSLETTER ==========
    const newsletterForms = document.querySelectorAll('.newsletter-form');
    newsletterForms.forEach(form => {
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            const emailInput = this.querySelector('input[type="email"]');
            const email = emailInput.value;
            
            // Validação simples
            if (email.includes('@') && email.includes('.')) {
                // Simulação de envio
                this.innerHTML = '<p class="success-message">Obrigado por assinar nossa newsletter!</p>';
                
                // Fecha o popup se for o caso
                if (this.closest('.newsletter-popup')) {
                    setTimeout(() => {
                        newsletterPopup.style.display = 'none';
                        localStorage.setItem('newsletterClosed', 'true');
                    }, 2000);
                }
            } else {
                emailInput.style.borderColor = 'red';
                setTimeout(() => {
                    emailInput.style.borderColor = '';
                }, 2000);
            }
        });
    });

    // ========== EFEITO NOS CÍRCULOS ==========
    document.querySelectorAll('.circle-wrapper').forEach(circle => {
        circle.addEventListener('mousemove', (e) => {
            const rect = circle.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            const centerX = rect.width / 2;
            const centerY = rect.height / 2;
            const angle = Math.atan2(y - centerY, x - centerX) * 180 / Math.PI;
            circle.style.setProperty('--angle', `${angle}deg`);
        });
    });

    // ========== SMOOTH SCROLL ==========
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth'
                });
            }
        });
    });
});

    document.addEventListener('DOMContentLoaded', function() {
        // Verifica se deve abrir o carrinho (vindo do tortas.html)
        if (localStorage.getItem('shouldOpenCart') === 'true') {
            // Simula o clique no botão do carrinho
            document.querySelector('.cart-btn').addEventListener('click', function(e) {
                e.preventDefault();
                document.getElementById('cartDropdown').classList.toggle('active');
                updateCartDisplay(); // Garante que os itens estão atualizados
            });
            // Inicializa o carrinho
            loadCart();

            // Limpa dados corrompidos (opcional, para debug)
            if (cartItemsCount > 0 && cartItems.length === 0) {
                localStorage.removeItem('kideliCart');
                cartItemsCount = 0;
                updateHeaderCartCount();
            }
        }
    
    // Função para atualizar o carrinho
    function updateCartDisplay() {
        const cartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
        const cartCount = document.querySelector('.cart-count');
        
        // Atualiza o contador
        const totalItems = cartItems.reduce((total, item) => total + (item.quantity || 1), 0);
        cartCount.textContent = totalItems;
        
        // Seu código existente para mostrar os itens do carrinho...
    }
    
    // Inicializa o carrinho
    updateCartDisplay();
    });
    // Controle do dropdown do carrinho
    document.querySelector('.cart-btn').addEventListener('click', function(e) {
        e.preventDefault();
        document.getElementById('cartDropdown').classList.toggle('active');
        updateCartDisplay();
    });

    // Fechar o carrinho ao clicar fora
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.cart-btn') && !e.target.closest('.cart-dropdown')) {
            document.getElementById('cartDropdown').classList.remove('active');
        }
    });